[{"path":"https://rayvonw.github.io/batchCurve/articles/a01-plan-assays.html","id":"planning-assays","dir":"Articles","previous_headings":"","what":"Planning assays","title":"Step 1: Plan assays","text":"Included batchCurve helper functions designing dose-response assays batches 96 well plates. tools take specified dose ranges guide values arranges compounds 384w plates - 8 assays triplicate (omitting position 5). example input file included shows required fields: well index compound stock_mM starting_uM dilution_factor guide_IC50 A01 C01 C01 10   0.001 B01 C02 C02 10   0.010 C01 C03 C03 10   0.100 D01 C04 C04 10   0.500 E01 C05 C05 10   1.000 F01 C06 C06 10   3.000 G01 C07 C07 10    H01 C08 C08 10 2 2  RED required entries user can specify range starting_uM dilution_factor left blank guide provider IC50 can used set range completely blank default 10uM 1in2 dose range set. tool expects plate order column (left--right), assuming user print via 8-channel pipette onto Tecan D300e 8 well cassettes. [plan_ranges()] function specify starting concentration assay based provided information. also adjust stock concentration required print job. advisory user specified concentrations assay volumes impact print viability DMSO thresholds. therefore always recommended run assays simulation mode D300e diluting stocks well index compound stock_mM starting_uM dilution_factor guide_IC50 A01 C01 C01 0.01 0.016 2 0.001 B01 C02 C02 0.10 0.400 2 0.010 C01 C03 C03 1.00 2.000 2 0.100 D01 C04 C04 10.00 10.000 2 0.500 E01 C05 C05 10.00 25.000 2 1.000 F01 C06 C06 10.00 50.000 2 3.000 G01 C07 C07 10.00 10.000 2  H01 C08 C08 1.00 2.000 2  [build_plates()] function produce excel spreadsheet include: sheet ranges specified [plan_ranges()] One sheet per column plate assays laid copy-pasting D300e meta file describing plate layout use analysis tools downstream.Cell ID’s duplicate plates completed user. Following printing cell dropping, house protocol specifies cell lysis SYBR staining 72hr incubation, plates later read Omega Fluostar plate reader. plate ‘plate_id’ tag recorded ID1 position Fluostar software, exported raw data ASCII csv file ‘TRno’ prefix (one file per plate). raw files placed folder associated meta file fitting (see step 2: vignette(\"a02-dose-response-analysis\"))","code":"f <- utils::read.csv(batchCurve_example(\"plan_IC50s.csv\")) head(f, 8) %>% flextable::flextable() %>%     flextable::color(j = 1:3, color = \"red\", part = \"header\") %>%    flextable::color(j = 4:6, color = \"orange\", part = \"header\") d <- plan_ranges(batchCurve_example(\"plan_IC50s.csv\")) head(d, 8) %>% flextable::flextable() build_plates(data = d, prefix = 'example')"},{"path":"https://rayvonw.github.io/batchCurve/articles/a02-dose-response-analysis.html","id":"accepted-assay-format","dir":"Articles","previous_headings":"","what":"Accepted assay format","title":"Step 2: Dose-Response analysis","text":"Accepted formats include 10 point serial dilution 2-3 replicates either 96 384 well plates. exact format dictate many positions (pos_x) available plate. available positions format shown : batchCurve comes bundled number example dose-response sample files:","code":"# lists the names of available example data files batchCurve_example() #>  [1] \"compare_results.csv\"  \"example_meta.csv\"     \"example1_data.csv\"    #>  [4] \"example1_results.csv\" \"plan_IC50s.csv\"       \"TRno0000.CSV\"         #>  [7] \"TRno0001.CSV\"         \"TRno0002.CSV\"         \"TRno0003.CSV\"         #> [10] \"TRno3735.CSV\"         \"TRno3965.CSV\"         \"TRno4849.CSV\"         #> [13] \"TRno4850.CSV\""},{"path":"https://rayvonw.github.io/batchCurve/articles/a02-dose-response-analysis.html","id":"meta-data-requirments","dir":"Articles","previous_headings":"","what":"Meta data requirments","title":"Step 2: Dose-Response analysis","text":"Example_meta.csv contains meta data describe assays plate contents, one row represent one assay: Plate ID variable link meta plate file raw measurements Location data describing format positions plate assay sits Treatment cell ID information Dose range information plate_id position_id format replicates index compound cell starting_uM dilution_factor plate_4 pos_1 384w 3 C01 Torin2 Dd2 0.04 2 plate_4 pos_2 384w 3 C01 Torin2 Dd2 0.04 2 plate_4 pos_3 384w 3 C01 Torin2 Dd2 0.04 2 plate_4 pos_4 384w 3 C02 BT-C10 Dd2 0.50 2 plate_4 pos_5 384w 3 C02 BT-C10 Dd2 0.50 2 plate_4 pos_6 384w 3 C03 NITD609 Dd2 0.04 2 column names meta file rely exact text matching, best work template file. assays plate must setup number replicates, formats plates batch can different, .e meta include 384 well plate triplicate containing 10 assays well 96 well plate duplicate containing 3 assays. can filter meta data wish exclude certain assays.","code":"f <- batchCurve_example(\"example_meta.csv\") f"},{"path":"https://rayvonw.github.io/batchCurve/articles/a02-dose-response-analysis.html","id":"raw-data-format-requirements","dir":"Articles","previous_headings":"","what":"Raw data format requirements","title":"Step 2: Dose-Response analysis","text":"analysis pipeline developed compatible Omega Fluostar plate reader csv output (ASCII), includes 3 required components: Data stored files prefix - ‘TRno’ ‘automated’. ID variable set reading plate matches plate_id meta file (Omega prefixes ‘ID1:’). row 3 column 1 raw data csv must match exactly meta file plate_ID name. Raw read data plate format well A01 begins row 10, column 1 file.","code":"#look at one of the raw data file examples f <- batchCurve_example(\"TRno3735.CSV\") #batchCurve looks in row 3 column 1 for ID variable utils::read.csv(f, nrow = 3, header = FALSE)[3,1] #> [1] \"ID1: plate_A3\" # showing file from row 9 head(utils::read.csv(f, skip = 8),11) #>   Chromatic..1   X X.1  X.2  X.3  X.4  X.5  X.6  X.7  X.8  X.9 X.10 #> 1     Cycle: 1  NA  NA   NA   NA   NA   NA   NA   NA   NA   NA   NA #> 2          341 574 598  600  626  666  705  708  722  737  746  512 #> 3          341 574 598  600  626  666  705  708  722  737 6997  512 #> 4          341 574 598  600  626  666  705  708  722  737 5973  485 #> 5          341 574 598  600  626  666  705  708  722  737 6997  516 #> 6          341 574 598  600  626  666  705  708  722  737 5973  517 #> 7          696 702 785 1474 2633 4078 5928 6064 6246 6965 6997  524 #> 8          636 621 714 1336 2365 3731 5050 6085 6065 5927 5973  483 #> 9          341 574 598  600  626  666  705  708  722  737  746  512"},{"path":"https://rayvonw.github.io/batchCurve/articles/a02-dose-response-analysis.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Step 2: Dose-Response analysis","text":"fit curves batch raw data, need supply fit_data() function meta file. can either file path setting working directory data lives. path supplied function assumes data working directory. output/results exported directory meta file. addition, user can supply function text batch_id, used prefix output file names. advisable avoid accumulating result files name makes searching results easier, particularity analysis run second time filtered meta file. function provide console feedback analysis progress. complete, two objects exported csv file also returned list. note: first assay example data set artificial designed fail fitting! prefix_results.csv’ file containing meta data model coefficient columns appended. data frame also returned first item list analysis, row still represents 1 assay. unique identifier (IC50_key) assigned avoid clashes repeat assays link assay data. Normalised measurements dose uM exported unique IC50_key links back assay coefficients data frame.","code":"#use example files meta <- batchCurve_example(\"example_meta.csv\")  l <- fit_data(file_path = meta, prefix = 'example1') m <- l[[1]] head(m, 10)[,c(1,6,8,13,20)] #>          IC50_key index cell                 IC50 hill_slope #> 1  IirE0wRkfPLjf5   C05  Dd2               Failed         NA #> 14 r4q6UFgAxJMtp6   C06  Dd2    0.397087567384264   1.673443 #> 11 4zbAu2aEuohDjD   C04  Dd2    0.409200699062012   3.917486 #> 12 SKZFSuyotalziD   C04  3D7    0.609087279032902   4.360740 #> 5  5pb90SUHjlsA2J   C01  Dd2  0.00183920429016226   2.970942 #> 2  OCP3OyHgjCyj3W   C01  Dd2    0.001979863848655   6.139312 #> 3  hg1DIdTQhwBDgU   C01  Dd2  0.00199157050920151   5.418731 #> 4  de5llzyOSJAWUm   C02  Dd2   0.0118873520155513   2.471598 #> 9  Ci4LpGZKaBwXXH   C02  Dd2   0.0120119550447347   2.119453 #> 6  RN1SO1NYrNWbGH   C03  Dd2 0.000860595386861181   6.341140 d <- l[[2]] head(d, 10) #>               key        dose replicate_1 replicate_2 replicate_3 #> 1  IirE0wRkfPLjf5 10.00000000      100.00       96.41       98.77 #> 2  IirE0wRkfPLjf5  5.00000000      100.00       96.41       98.77 #> 3  IirE0wRkfPLjf5  2.50000000      100.00       96.41       98.77 #> 4  IirE0wRkfPLjf5  1.25000000      100.00       96.41       98.77 #> 5  IirE0wRkfPLjf5  0.62500000        3.15        3.15        3.15 #> 6  IirE0wRkfPLjf5  0.31250000        3.15        3.15        3.15 #> 7  IirE0wRkfPLjf5  0.15625000        3.15        3.15        3.15 #> 8  IirE0wRkfPLjf5  0.07812500       96.41       96.41       96.41 #> 9  IirE0wRkfPLjf5  0.03906250       96.41       96.41       96.41 #> 10 IirE0wRkfPLjf5  0.01953125       96.41       96.41       96.41"},{"path":"https://rayvonw.github.io/batchCurve/articles/a02-dose-response-analysis.html","id":"quality-control","dir":"Articles","previous_headings":"","what":"Quality Control","title":"Step 2: Dose-Response analysis","text":"standard Hill model enables generating sigmoidal curves capture dose-response data cases. However, appropriate cases multiple points inflection, .e multiphasic data. important users visually assess assay quality fit quality data accepting IC50 value. separate function plotting data models included batchCurve, plot_fit(). functionality separated model fitting procedure allow user option re-plot results manipulation, .e want filter failed assays merge multiple batches together. See vignette(\"a03-visualise-models\") walk procedure.","code":""},{"path":"https://rayvonw.github.io/batchCurve/articles/a03-visualise-models.html","id":"example-files","dir":"Articles","previous_headings":"","what":"Example files","title":"Step 3: Visualise models","text":"batchCurve comes bundled number example dose-response sample files: results csv fit_data() function contain data users meta file fitted model coefficients appended. randomly generated key identifier attached assay prevent clashes repeat assays link normalised data. IC50_key compound cell IC50 min max hill_slope r4q6UFgAxJMtp6 04-21-C01 Dd2 0.3971 1.5366 98.0675 1.6734 4zbAu2aEuohDjD 06-21-C37 Dd2 0.4092 7.7123 99.3641 3.9175 SKZFSuyotalziD 06-21-C37 3D7 0.6091 8.5220 97.4135 4.3607 5pb90SUHjlsA2J Torin2 Dd2 0.0018 7.9017 99.0182 2.9709 data file fitting function contains normalised replicate data assays dose range. key value uniquely link assay results data. key dose replicate_1 replicate_2 replicate_3 IirE0wRkfPLjf5 10.0000 100.0000 96.4100 98.7700 IirE0wRkfPLjf5 5.0000 100.0000 96.4100 98.7700 IirE0wRkfPLjf5 2.5000 100.0000 96.4100 98.7700 IirE0wRkfPLjf5 1.2500 100.0000 96.4100 98.7700 IirE0wRkfPLjf5 0.6250 3.1500 3.1500 3.1500","code":"# lists the names of available example data files batchCurve_example() #>  [1] \"compare_results.csv\"  \"example_meta.csv\"     \"example1_data.csv\"    #>  [4] \"example1_results.csv\" \"plan_IC50s.csv\"       \"TRno0000.CSV\"         #>  [7] \"TRno0001.CSV\"         \"TRno0002.CSV\"         \"TRno0003.CSV\"         #> [10] \"TRno3735.CSV\"         \"TRno3965.CSV\"         \"TRno4849.CSV\"         #> [13] \"TRno4850.CSV\" r <- utils::read.csv(batchCurve_example(\"example1_results.csv\")) d <- utils::read.csv(batchCurve_example(\"example1_data.csv\"))"},{"path":"https://rayvonw.github.io/batchCurve/articles/a03-visualise-models.html","id":"visualise-a-curve","dir":"Articles","previous_headings":"","what":"Visualise a curve","title":"Step 3: Visualise models","text":"[plot_fit()] function allows batch plotting assay. returns list object plots inspection exports plots pdf. default plots grouped compound coloured differently cell. order easy interpretation IC50 < 0.1 converted nM scale. index variable meta file used subtitle can therefore used needed.  Two pdf files exported, one grouped compound one plot per assay.","code":"p <- plot_fit(results = r, data = d, prefix = 'example') print(p[3]) #> [[1]]"},{"path":"https://rayvonw.github.io/batchCurve/articles/a03-visualise-models.html","id":"quality","dir":"Articles","previous_headings":"","what":"Quality","title":"Step 3: Visualise models","text":"function fits 4 parameter log-logistic model covers 99% dose-response circumstances. user establish quality based fit, dose range, signal replicate variability. Assays deemed unfit can removed results file replotting needed (need filter data.csv file).","code":""},{"path":"https://rayvonw.github.io/batchCurve/articles/a04-compare-IC50.html","id":"naming-format","dir":"Articles","previous_headings":"","what":"Naming format","title":"Step 4 : Compare IC50","text":"typical use case IC50 comparisons collection IC50 estimates mutant cell vs parent wild type. batchCurve relies naming format determine mutant-parent identities: parent_gene_variant compound-mutant combination, tool compare matching compound-parent based first text components ID. example, highlighted blue appropriate parent names allow comparison Dd2_ProtB5-M45I (red ): Dd2 Dd2-Dd2_A 3D7","code":""},{"path":"https://rayvonw.github.io/batchCurve/articles/a04-compare-IC50.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Step 4 : Compare IC50","text":"batchCurve comes bundled number example dose-response sample files: example file (“compare_results.csv”) contains multiple repeat assays number compound-mutant combinations. run compare show shortened view output file. cell compound mean_IC50_uM stdev n FC p.value Dd2_PI4K_S743F+H1484Y KDU691 0.4741 0.1009 8 5.84 0.0001554002 Dd2_PI4K_CNV KDU691 0.2881 0.1215 7 3.55 0.0003108003 Dd2_PI4K_S1320L+L1418F KDU691 3.7637 0.4806 4 46.35 0.0040404040 plotting function returns list plots well pdf export file.","code":"# lists the names of available example data files batchCurve_example() #>  [1] \"compare_results.csv\"  \"example_meta.csv\"     \"example1_data.csv\"    #>  [4] \"example1_results.csv\" \"plan_IC50s.csv\"       \"TRno0000.CSV\"         #>  [7] \"TRno0001.CSV\"         \"TRno0002.CSV\"         \"TRno0003.CSV\"         #> [10] \"TRno3735.CSV\"         \"TRno3965.CSV\"         \"TRno4849.CSV\"         #> [13] \"TRno4850.CSV\" # example file contains mutltiple repeat assays for a number of compound-mutant combinations d <- utils::read.csv(batchCurve_example(file = \"compare_results.csv\")) cp <- compare(data = d, prefix = 'example')  cp[,c(1:2,4:6,12, 14)] %>% head(3) %>%   flextable::flextable() knitr::opts_chunk$set(dev = 'pdf') p <- head(cp, 3) %>% plot_mean(prefix = 'example') p[1] #> [[1]]"},{"path":"https://rayvonw.github.io/batchCurve/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ray Coyle. Maintainer.","code":""},{"path":"https://rayvonw.github.io/batchCurve/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coyle R (2024). batchCurve: Provides batch analysis dose-response modelling. R package version 1.0.0, https://rayvonw.github.io/batchCurve/, https://github.com/rayVonW/batchCurve.","code":"@Manual{,   title = {batchCurve: Provides batch analysis for dose-response modelling},   author = {Ray Coyle},   year = {2024},   note = {R package version 1.0.0, https://rayvonw.github.io/batchCurve/},   url = {https://github.com/rayVonW/batchCurve}, }"},{"path":[]},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Provides batch analysis for dose-response modelling","text":"batchCurve analytical workflow developed batch analysis dose-response assays carried blood stage Plasmodium falciparum. involves automated fitting four parameter log logistic mode estimate IC50 compound-cell combination. Assay formats assumed 10 point serial dilution well positive negative growth control. accepted layouts assume either duplicate triplicate measurement either 96 384 well culture plates. batch drug assays can combination 96 /384 well plates. expected one raw plate reader csv file per assay plate analysis folder. Assays plate must number replicates. details assay setup can found step--step guide articles drop menu.","code":""},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Provides batch analysis for dose-response modelling","text":"install_github function devtools package allows users install R packages hosted GitHub. requests developer’s name/package name.","code":"#First install devtools from CRAN install.packages(\"devtools\") # load devtools library(devtools) # use function to install a github package install_github(\"rayVonW/batchCurve\")"},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Provides batch analysis for dose-response modelling","text":"can load package : five main steps workflow:","code":"library(batchCurve)"},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"id_1-plan-assays-to-specification-format","dir":"","previous_headings":"","what":"1. Plan assays to specification format","title":"Provides batch analysis for dose-response modelling","text":"[plan_ranges()] [build_plates()] take csv file compound IDs 96 well layout produce excel workbook suggested dose-response ranges triplicate 384w layout copy pasting Tecan D300e digital printer. input csv can provide ‘guide/provider’ IC50 set range, user specified range , left blank default starting concentration 10μM 10-point 1:2 serial dilution triplicate. prefix text name - prefix exported ‘print_plan.xlsx’ file. vignette(\"a01-plan-assays\") gives detailed introduction planning.","code":"#all meta and raw data stored in ~/batch plan <- plan_ranges(batchCurve_example(\"plan_IC50s.csv\")) #inspect the suggested ranges before exporting plate layouts. build_plates(data = plan, prefix = 'example')"},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"id_2-fit-model-to-data","dir":"","previous_headings":"","what":"2. Fit model to data:","title":"Provides batch analysis for dose-response modelling","text":"[fit_data()] attempt fit four parameter log logistic model batch raw dose-response data. expects argument meta.csv file name, file found directory raw data file. prefix text name - prefix exported result files , .e. ‘results.csv’ ‘data.csv’. vignette(\"a02-dose-response-analysis\") gives expanded introduction fitting batches data.","code":"#all meta and raw data stored in ~/batch d <- fit_data(file_path = '~/batch/meta-data.csv',           prefix = 'batch01')"},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"id_3-visualise-the-fit","dir":"","previous_headings":"","what":"3. Visualise the fit:","title":"Provides batch analysis for dose-response modelling","text":"[plot_fit()] accepts batch log-logistic coefficients normalised raw data produce visualisations dose-response assay data allow assessment fit. accepts data frame model results data frame normalised data, exported directly [fit_data()]. User can include prefix linking visualisation results file prefixes. vignette(\"a03-visualise-models\") gives expanded introduction plotting results.","code":"#feed results and data for visualisation plot_fit(results = d[1],           data = d[2],          prefix = 'batch01')"},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"id_4-compare-ic50-data","dir":"","previous_headings":"","what":"4. Compare IC50 data:","title":"Provides batch analysis for dose-response modelling","text":"Typical use case involves testing mutants mean IC50 vs wild type. collected repeated IC50 estimates, can merge results files one feed [compare()] * function accepts output results.csv file format [fit_data()]. * calculate mean, standard deviation compound-cell combination. * implement Mann-Whitney U test significance unpaired samples * export return results csv file mean IC50 values resulting p values. vignette(\"a04-compare-IC50\") gives expanded introduction significance testing IC50 results.","code":"comp <-  compare(data = d[1], prefix = 'example')"},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"id_5-visualise-comparisons","dir":"","previous_headings":"","what":"5. Visualise comparisons:","title":"Provides batch analysis for dose-response modelling","text":"Visualisation separated [plot_mean()] allow user filter comparison results bar plots mean IC50. vignette(\"a04-compare-IC50\") gives expanded introduction significance testing IC50 results.","code":"# here a pdf called example_IC50_compare.pdf containing barplot in a 2x2 grid p <- plot_mean(data = comp, prefix = 'example', grid.var = 2)"},{"path":"https://rayvonw.github.io/batchCurve/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Provides batch analysis for dose-response modelling","text":"fit_data() wrapper function R package [drc] (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4696819).","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/batchCurve-package.html","id":null,"dir":"Reference","previous_headings":"","what":"batchCurve: Provides batch analysis for dose-response modelling — batchCurve-package","title":"batchCurve: Provides batch analysis for dose-response modelling — batchCurve-package","text":"tailored package analyse raw dose-response data corresponding meta data.","code":""},{"path":[]},{"path":"https://rayvonw.github.io/batchCurve/reference/batchCurve_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to readr example — batchCurve_example","title":"Get path to readr example — batchCurve_example","text":"batchCurve comes bundled number sample files `inst/extdata` directory. function make easy access","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/batchCurve_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to readr example — batchCurve_example","text":"","code":"batchCurve_example(file = NULL)"},{"path":"https://rayvonw.github.io/batchCurve/reference/batchCurve_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to readr example — batchCurve_example","text":"file Name file. `NULL`, example files listed.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/batchCurve_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to readr example — batchCurve_example","text":"","code":"batchCurve_example() #>  [1] \"TRno0000.CSV\"         \"TRno0001.CSV\"         \"TRno0002.CSV\"         #>  [4] \"TRno0003.CSV\"         \"TRno3735.CSV\"         \"TRno3965.CSV\"         #>  [7] \"TRno4849.CSV\"         \"TRno4850.CSV\"         \"compare_results.csv\"  #> [10] \"example1_data.csv\"    \"example1_results.csv\" \"example_meta.csv\"     #> [13] \"plan_IC50s.csv\"       batchCurve_example(\"TRno4850.csv\") #> Error in system.file(\"extdata\", file, package = \"batchCurve\", mustWork = TRUE): no file found"},{"path":"https://rayvonw.github.io/batchCurve/reference/build_plates.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts assay parameters to 384w plate layouts in excel for Tecan D300e printing — build_plates","title":"Converts assay parameters to 384w plate layouts in excel for Tecan D300e printing — build_plates","text":"Converts assay parameters 384w plate layouts excel Tecan D300e printing","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/build_plates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts assay parameters to 384w plate layouts in excel for Tecan D300e printing — build_plates","text":"","code":"build_plates(data, prefix = \"example\")"},{"path":"https://rayvonw.github.io/batchCurve/reference/build_plates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts assay parameters to 384w plate layouts in excel for Tecan D300e printing — build_plates","text":"data data frame Compound dilution curve information. prefix text string output file names.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/build_plates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts assay parameters to 384w plate layouts in excel for Tecan D300e printing — build_plates","text":"export .xlsx file sheet representing 384w plate Tecan D300e.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilcox rank sum of unpaired IC50 data — compare","title":"Wilcox rank sum of unpaired IC50 data — compare","text":"Wilcox rank sum unpaired IC50 data","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilcox rank sum of unpaired IC50 data — compare","text":"","code":"compare(data, prefix = \"group\")"},{"path":"https://rayvonw.github.io/batchCurve/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilcox rank sum of unpaired IC50 data — compare","text":"data data frame - exported object fit_data(). prefix string output file names.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilcox rank sum of unpaired IC50 data — compare","text":"data frame object mean IC50 data p values","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/example_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose response meta data example — example_meta","title":"Dose response meta data example — example_meta","text":"example meta data file describing drug assays analysis ...","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/example_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose response meta data example — example_meta","text":"","code":"data(example_meta)"},{"path":"https://rayvonw.github.io/batchCurve/reference/example_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dose response meta data example — example_meta","text":"## `example_meta` data frame 23 rows 9 columns: plate_id ID given plates reader file position_id Position assay plate, 'pos_x' format Plate format, either '384w' '96w' replicates many replicates per assay used, either '2' '3' index label compound, used sorting output compound Supplier ID compound cell Cell ID starting_uM Drug concentration column 1 plate, .e. highest concentration uM dilution_factor serial dilution factor used assay","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/example_meta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dose response meta data example — example_meta","text":"author","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/fit_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an LL.4 model to dose response data in batches. — fit_data","title":"Fit an LL.4 model to dose response data in batches. — fit_data","text":"'fit_data()' tailored 384 well SYBR Green dose response assays Plasmodium.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/fit_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an LL.4 model to dose response data in batches. — fit_data","text":"","code":"fit_data(file_path, prefix)"},{"path":"https://rayvonw.github.io/batchCurve/reference/fit_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an LL.4 model to dose response data in batches. — fit_data","text":"file_path file containing batches meta data. prefix batch identifier output files, .e 'batch01'","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/fit_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an LL.4 model to dose response data in batches. — fit_data","text":"list data frames, 1st LL4 model coefficients dose-response assays 2nd normalised data (percentage growth). dataframes also exported .e 'batch01_results.csv' 'batch01_data.csv'.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plan_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Designs dose-response assays from 96 well compounds plate for Tecan D300e — plan_ranges","title":"Designs dose-response assays from 96 well compounds plate for Tecan D300e — plan_ranges","text":"Designs dose-response assays 96 well compounds plate Tecan D300e","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plan_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Designs dose-response assays from 96 well compounds plate for Tecan D300e — plan_ranges","text":"","code":"plan_ranges(input_file)"},{"path":"https://rayvonw.github.io/batchCurve/reference/plan_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Designs dose-response assays from 96 well compounds plate for Tecan D300e — plan_ranges","text":"input_file file name containing Compound assay parameters guide IC50 values.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plan_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Designs dose-response assays from 96 well compounds plate for Tecan D300e — plan_ranges","text":"data frame completed dose ranges.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plot_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces group plots of dose response models from fit_data() — plot_fit","title":"Produces group plots of dose response models from fit_data() — plot_fit","text":"Produces group plots dose response models fit_data()","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plot_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces group plots of dose response models from fit_data() — plot_fit","text":"","code":"plot_fit(   results,   data,   prefix,   plot.var = \"compound\",   colour.var = \"cell\",   facet.var = NULL,   grid.var = 3,   leg.pos = \"bottom\" )"},{"path":"https://rayvonw.github.io/batchCurve/reference/plot_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces group plots of dose response models from fit_data() — plot_fit","text":"results data frame IC5 coefficients, fit_data. data data frame normalised dose response signal, fit_data. prefix character ID output file prefix. plot.var column name wish subset data per plot, default \"compound\", may wish specify \"cell\". colour.var column name wish differentiate data per plot colour, default = \"cell\", may wish specify \"compound\". facet.var column name wish differentiate data facet, default = NULL, may wish \"cell\" separate plots. grid.var numeric value specifying grid size exported pdf, default = 3 .e 3x3. leg.pos Legend position accepts 'right', 'left' top'","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plot_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces group plots of dose response models from fit_data() — plot_fit","text":"list plot objects per plot_var two exported pdf files plots, grouped variable individual assays.","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plot_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots barchart of mean I50 values and displays p value — plot_mean","title":"Plots barchart of mean I50 values and displays p value — plot_mean","text":"Plots barchart mean I50 values displays p value","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plot_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots barchart of mean I50 values and displays p value — plot_mean","text":"","code":"plot_mean(data, prefix = \"group\", grid.var = 2)"},{"path":"https://rayvonw.github.io/batchCurve/reference/plot_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots barchart of mean I50 values and displays p value — plot_mean","text":"data data frame direct output compare() prefix string values append output files grid.var integer value describing plot grid size output file","code":""},{"path":"https://rayvonw.github.io/batchCurve/reference/plot_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots barchart of mean I50 values and displays p value — plot_mean","text":"list plot objects","code":""}]
